 /*
Variable storage can be either auto or static.The default storage class of Dynamic C is static.
By changing to auto to make local variable with no explicit storage class in functions default to auto
 */
#class auto


//NETWORK CONFIGURATION

#define TCPCONFIG 1									  		 // "TCPCONFIG 1" = No DHCP, "TCPCONFIG 5" = DHCP enable. (DHCP allows a computer to join an IP-based network without having a pre-configured IP address)

/*********************************
*Change this IP to add new remote*
 IP address setting
 Remote    IP Address
 1         10.0.1.41
 2         10.0.1.42
 3         10.0.1.43
 4         10.0.1.44
 5         10.0.1.45
 6         10.0.1.46
 7         10.0.1.47
 8         10.0.1.48
 9         10.0.1.49
 10        10.0.1.50
 *********************************/

#define _PRIMARY_STATIC_IP "10.0.1.50"         				 // IP address of REMOTE RABBIT RCM5600W MiniCore module

/*************************************/


#define MY_GATEWAY "10.0.0.1"                 				 // IP address of Router
#define MY_NAMESERVER "10.0.0.1"							 // Nameserver IP address
#define IFC_WIFI_SSID "SIP_MP"                 				 // SSID name of the network
#define IFC_WIFI_ENCRYPTION  IFPARAM_WIFI_ENCR_NONE   	     // Disable encryption(no password needed)
#define _PRIMARY_NETMASK "255.255.0.0"                	     // Configure subnetmask


/*
 * Define the number of socket buffers that will be allocated for
 * UDP sockets.  We only need one UDP socket, so one socket buffer
 * will be enough.
 */
#define MAX_UDP_SOCKET_BUFFERS 1						     // allocate a socket buffer for the UDP socket.

/**************************
 * UDP demo configuration *
 **************************/


#define  HEARTBEAT_RATE 	200								 // send out UDP packet every 200ms
#define LOCAL_PORT	1234									 // define the local port to receive datagrams on
#define REMOTE_IP			"10.0.1.55"						 // define remote (which is PC in this case) IP address as 10.0.1.55
#define REMOTE_PORT	1234									 // define the destination port to send to.

/********************************
 * End of configuration section *
 ********************************/

#memmap xmem	  											 // All C functions not declared as root go to extended memory
#use "rcm56xxw.lib"											 // Use this command to define a library
#use "dcrtcp.lib"											 // Use this command to define a library

udp_Socket sock;											 // the socket to use for UDP communication

_udp_datagram_info udi;										 /*The info structure is a pointer to _udp_datagram_info
															 (UDI), which is set up with the usual udp_peek information
															 such as the host IP address and port number*/


// on board
#define BS1  1                                               // define BS1 = PD1

// M= Motor
#define M1 3												 // define Motor 1 = PB3
#define M2 5												 // define Motor 2 = PB5
#define M3 7												 // define Motor 3 = PB7

// Sen= Sensor
#define Sen1 3											     // define Sensor 1 = PE3
#define Sen2 0												 // define Sensor 2 = PE0
#define Sen3 5												 // define Sensor 3 = PE5

/*declare and initialize variables uesed to control 3 sensors*/
int m1 = 0;
int m2 = 0;
int m3 = 0;

// sensor state (0 = release, 1 = press)

static int sensor1state;									 // declare sensor1state as static integer type variable
static int sensor2state;									 // declare sensor2state as static integer type variable
static int sensor3state;									 // declare sensor3state as static integer type variable

// on board
static int buttonstate;										 // declare buttonstate as static integer type variable (on board)

/* send one packet (heartbeat) */

int send_packet(int sen_num, int sen_state)
{
	auto char 	buf_send[128];								 // declare buf_send as auto char type array
	auto int 	length, retval;								 // declare length, retval as auto int type variable

/****************************************
 *fill the packet with interesting data *
 ****************************************/
                                 // Receive sensor state only if all motors turn off

   switch(sen_num)											 // the case structure
   {
		case 1:												 // sensor 1 pressed
      	if(0 == sen_state)									 // check if sensor state is low
            sprintf(buf_send, "SENSOR101_OFF");				 // send and print the message "SENSOR1_OFF" (which indicates food tank1 level is normal)
         else
            sprintf(buf_send, "SENSOR101_ON ");				 // send and print the message "SENSOR1_ON" (which indicates food tank1 level is low)
		break;

		case 2:												 // sensor 2 pressed
      	if(0 == sen_state)									 // check if sensor state is low
            sprintf(buf_send, "SENSOR102_OFF");				 // send and print the message "SENSOR2_OFF" (which indicates food tank2 level is normal)
         else
            sprintf(buf_send, "SENSOR102_ON ");				 // send and print the message "SENSOR2_ON" (which indicates food tank2 level is low)
		break;

		case 3:												 // sensor 3 pressed
      	if(0 == sen_state)						  			 // check if sensor state is low
            sprintf(buf_send, "SENSOR103_OFF");				 // send and print the message "SENSOR3_OFF" (which indicates food tank3 level is normal)
         else
            sprintf(buf_send, "SENSOR103_ON ");				 // send and print the message "SENSOR3_ON" (which indicates food tank3 level is low)
		break;

		default:											 // wrong sensor was pressed
      	sprintf(buf_send, "WRONG_SENSOR");					 // store "WRONG_SENSOR" into buf_send and display
		break;
	}

	length = strlen(buf_send) + 1;						     // define length = the length of the string "buf_send" + 1

/******************
 *send the packet *
 ******************/

	retval = udp_send(&sock, buf_send, length);										// stored datagram will be sent to the retval
	if (retval < 0)																	// check if the returned value contains error
	{
		printf("Error sending datagram!  Closing and reopening socket...\n");	    // display the error message
		sock_close(&sock);															// close the socket resource given by socket
		if(!udp_open(&sock, LOCAL_PORT, resolve(REMOTE_IP), REMOTE_PORT, NULL))     // check if udp packet was opened
		{
			printf("udp_open failed!\n");									  		// display error message
			exit(0);
		}
	}
   else {
   		printf("Transmitted -> %s\n",buf_send);						                // display transmission information
   }

	return 1;																        // stop sending packet
}

/**********************************
 * receive one packet (heartbeat) *
 **********************************/


int receive_packet(void)													    // receive a datagram
{
	static char buf_receive[128];											    // the array that will hold a received datagram

	#GLOBAL_INIT					  											// initialize static variables in Static RAM (SRAM)
	{
		memset(buf_receive, 0, sizeof(buf_receive));						    // clear buf_receive
	}


/***********************
 *  receive the packet *
 ***********************/


	if (-1 == udp_recv(&sock, buf_receive, sizeof(buf_receive)))	            // receive a datagram from the specified host
	{
		return 0;																// if the return value is -1, there was no datagram, so return 0
	}

	printf("Received-> %s\n",buf_receive);									    // display the message received

		if (!strcmp(buf_receive, "BUTTON1_OFF"))							    // check if button1 off
		{
			BitWrPortI(PBDR, &PBDRShadow, 0, M1);      				         	// turn off motor1
			m1=0;
		}
		else if (!strcmp(buf_receive, "BUTTON1_ON ")) 					        // check if button1 on
		{
      		BitWrPortI(PBDR, &PBDRShadow, 1, M1);           	                // turn on motor1
			m1=1;
		}
		else if (!strcmp(buf_receive, "BUTTON2_OFF"))				            // check if button2 off
		{
			BitWrPortI(PBDR, &PBDRShadow, 0, M2);							    // turn off motor2
			m2=0;
		}
		else if (!strcmp(buf_receive, "BUTTON2_ON "))					        // check if button2 on
		{
      		BitWrPortI(PBDR, &PBDRShadow, 1, M2);						        // turn on motor2
			m2=1;
		}
		else if (!strcmp(buf_receive, "BUTTON3_OFF"))					        // check if button3 off
		{
			BitWrPortI(PBDR, &PBDRShadow, 0, M3);							    // turn off motor3
			m3=0;
		}
		else if (!strcmp(buf_receive, "BUTTON3_ON "))					        // check if button3 on
		{
      		BitWrPortI(PBDR, &PBDRShadow, 1, M3);					            // turn on motor3
			m3=1;
		}

	return 1;																	// end receive_packet
}

void main()
{
	sensor1state = 0;															// initialize sensor1state off
	sensor2state = 0;												  		    // initialize sensor2state off
	sensor3state = 0;														    // initialize sensor3state off

	buttonstate = 0;														    // initialize buttonstate off

	brdInit();																    // initialize port registers for the operation of the board


/************
 * on board *
 ************/

	BitWrPortI(PDDDR, &PDDDRShadow, 0, BS1);							        // initialize BS1 off

	BitWrPortI(PEDDR, &PEDDRShadow, 0, Sen1);							        // initialize sensor1 off
	BitWrPortI(PEDDR, &PEDDRShadow, 0, Sen2);							        // initialize sensor2 off
	BitWrPortI(PEDDR, &PEDDRShadow, 0, Sen3);							        // initialize sensor3 off

	BitWrPortI(PBDR, &PBDRShadow, 0, M1);								        // initialize motor1 off
	BitWrPortI(PBDR, &PBDRShadow, 0, M2);								        // initialize motor2 off
	BitWrPortI(PBDR, &PBDRShadow, 0, M3);								        // initialize motor3 off


	sock_init_or_exit(1);													    // Start network and wait for interface to come up (or error exit)

	/*printf("Opening UDP socket\n");*/

/*******************
 * connection part *
 *******************/

	if(!udp_open(&sock, LOCAL_PORT, resolve(REMOTE_IP), REMOTE_PORT, NULL))	    // check if packet was opened
	{
		printf("udp_open failed!\n");											// display error message
		exit(0);
	}

/*******************
 * send heartbeats *
 *******************/

     for(;;)																	// infinite loop
	 {

		tcp_tick(NULL);															// Process network packets

		costate		  															// task: network connection
		{
			waitfor(DelayMs(HEARTBEAT_RATE));								    // delay 200ms

/************
 * Sensor 1 *
 ************/

         if (!BitRdPortI(PEDR, Sen1))											// check if Sensor1 on (on = food level low)
		 {
         	if(0 == sensor1state)												// check if sensor1state equals to 0
			{
            	printf("Sensor 1 pressed\n\n"); 								// display message "Sensor 1 pressed". Used for debugging, not used in actual program
            	sensor1state = 1;			  									// toggle sensor1state to 1
					waitfor(send_packet(1, sensor1state));						// wait for method send_packet to send (1, 1)
            }
         }
		 else
		 {
         	if(1 == sensor1state)												// check if sensor1state equals to 1
			{
            	printf("Sensor  1 released\n\n");							    // display message "Sensor 1 released"
            	sensor1state = 0;											    // toggle sensor1state to 0
					waitfor(send_packet(1, sensor1state));  					// wait for method send_packet to send (1, 0)
            }
         }

/************
 * Sensor 2 *
 ************/

         if (!BitRdPortI(PEDR, Sen2))											// check if Sensor2 on
		 {
         	if(0 == sensor2state)  												// check if sensor2state equals to 0
			{
            	printf("Sensor  2 pressed\n\n"); 							    // display message "Sensor 2 pressed"
            	sensor2state = 1;											    // toggle sensor2state to 1
				waitfor(send_packet(2, sensor2state));							// wait for method send_packet to send (2, 1)
            }
         }
		 else
		 {
         	if(1 == sensor2state)												// check if sensor2state equals to 1
			{
            	printf("Sensor  2 released\n\n");							    // display message "Sensor 2 released"
            	sensor2state = 0;												// toggle sensor2state to 0
                waitfor(send_packet(2, sensor2state));						    // wait for method send_packet to send (2, 0)
			}
         }

/************
 * Sensor 3 *
 ************/
         if (!BitRdPortI(PEDR, Sen3))											// check if Sensor3 on
		 {
         	if(0 == sensor3state)												// check if sensor3state equals to 0
			{
            	printf("Sensor  3 pressed\n\n");								// display message "Sensor 3 pressed"
            	sensor3state = 1;											    // toggle sensor3state to 1
				waitfor(send_packet(3, sensor3state));							// wait for method send_packet to send (3, 1)
            }
         }
		 else
		 {
         	if(1 == sensor3state)												// check if sensor3state equals to 1
			{
            	printf("Sensor  3 released\n\n");							    // display message "Sensor 3 released"
            	sensor3state = 0;											    // toggle sensor3state to 0
				waitfor(send_packet(3, sensor3state));							// wait for method send_packet to send (3, 0)
            }
         }
		}

    costate																		// task:receive packet
	{
      waitfor(udp_peek(&sock, &udi));											// wait for the packet
      waitfor(receive_packet());												// wait for packet receive

    }
	}
}